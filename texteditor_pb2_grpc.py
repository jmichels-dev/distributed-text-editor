# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import texteditor_pb2 as texteditor__pb2


class TextEditorStub(object):
    """python -m grpc_tools.protoc --proto_path=./protos --python_out=. --grpc_python_out=. texteditor.proto

    Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SaveToServer = channel.unary_unary(
                '/chat.TextEditor/SaveToServer',
                request_serializer=texteditor__pb2.Download.SerializeToString,
                response_deserializer=texteditor__pb2.FileResponse.FromString,
                )
        self.DeleteFromServer = channel.unary_unary(
                '/chat.TextEditor/DeleteFromServer',
                request_serializer=texteditor__pb2.FileResponse.SerializeToString,
                response_deserializer=texteditor__pb2.FileResponse.FromString,
                )
        self.OpenNewFile = channel.unary_unary(
                '/chat.TextEditor/OpenNewFile',
                request_serializer=texteditor__pb2.Download.SerializeToString,
                response_deserializer=texteditor__pb2.FileResponse.FromString,
                )
        self.OpenExistingFile = channel.unary_stream(
                '/chat.TextEditor/OpenExistingFile',
                request_serializer=texteditor__pb2.Download.SerializeToString,
                response_deserializer=texteditor__pb2.Data.FromString,
                )
        self.Listen = channel.unary_stream(
                '/chat.TextEditor/Listen',
                request_serializer=texteditor__pb2.Username.SerializeToString,
                response_deserializer=texteditor__pb2.Download.FromString,
                )
        self.SignInExisting = channel.unary_unary(
                '/chat.TextEditor/SignInExisting',
                request_serializer=texteditor__pb2.Username.SerializeToString,
                response_deserializer=texteditor__pb2.Unreads.FromString,
                )
        self.AddUser = channel.unary_unary(
                '/chat.TextEditor/AddUser',
                request_serializer=texteditor__pb2.Username.SerializeToString,
                response_deserializer=texteditor__pb2.Welcome.FromString,
                )
        self.Send = channel.unary_unary(
                '/chat.TextEditor/Send',
                request_serializer=texteditor__pb2.SendRequest.SerializeToString,
                response_deserializer=texteditor__pb2.Payload.FromString,
                )
        self.List = channel.unary_unary(
                '/chat.TextEditor/List',
                request_serializer=texteditor__pb2.Payload.SerializeToString,
                response_deserializer=texteditor__pb2.Payload.FromString,
                )
        self.Logout = channel.unary_unary(
                '/chat.TextEditor/Logout',
                request_serializer=texteditor__pb2.Username.SerializeToString,
                response_deserializer=texteditor__pb2.Payload.FromString,
                )
        self.Delete = channel.unary_unary(
                '/chat.TextEditor/Delete',
                request_serializer=texteditor__pb2.Username.SerializeToString,
                response_deserializer=texteditor__pb2.Payload.FromString,
                )


class TextEditorServicer(object):
    """python -m grpc_tools.protoc --proto_path=./protos --python_out=. --grpc_python_out=. texteditor.proto

    Interface exported by the server.
    """

    def SaveToServer(self, request, context):
        """A simple RPC.

        Saves file from client to primary server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFromServer(self, request, context):
        """Deletes file on primary server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenNewFile(self, request, context):
        """Opens new text file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenExistingFile(self, request, context):
        """Opens existing text file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Listen(self, request, context):
        """Response stream for client to receive messages from server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignInExisting(self, request, context):
        """Signs in existing user and gets unread messages.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Signs in new user and gets unread messages.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Send(self, request, context):
        """Sends message to recipient with Username
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Lists all usernames that match the optional text wildcard
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Logs out user and returns a confirmation response message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Deletes user and returns a confirmation response message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextEditorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SaveToServer': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveToServer,
                    request_deserializer=texteditor__pb2.Download.FromString,
                    response_serializer=texteditor__pb2.FileResponse.SerializeToString,
            ),
            'DeleteFromServer': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFromServer,
                    request_deserializer=texteditor__pb2.FileResponse.FromString,
                    response_serializer=texteditor__pb2.FileResponse.SerializeToString,
            ),
            'OpenNewFile': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenNewFile,
                    request_deserializer=texteditor__pb2.Download.FromString,
                    response_serializer=texteditor__pb2.FileResponse.SerializeToString,
            ),
            'OpenExistingFile': grpc.unary_stream_rpc_method_handler(
                    servicer.OpenExistingFile,
                    request_deserializer=texteditor__pb2.Download.FromString,
                    response_serializer=texteditor__pb2.Data.SerializeToString,
            ),
            'Listen': grpc.unary_stream_rpc_method_handler(
                    servicer.Listen,
                    request_deserializer=texteditor__pb2.Username.FromString,
                    response_serializer=texteditor__pb2.Download.SerializeToString,
            ),
            'SignInExisting': grpc.unary_unary_rpc_method_handler(
                    servicer.SignInExisting,
                    request_deserializer=texteditor__pb2.Username.FromString,
                    response_serializer=texteditor__pb2.Unreads.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=texteditor__pb2.Username.FromString,
                    response_serializer=texteditor__pb2.Welcome.SerializeToString,
            ),
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=texteditor__pb2.SendRequest.FromString,
                    response_serializer=texteditor__pb2.Payload.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=texteditor__pb2.Payload.FromString,
                    response_serializer=texteditor__pb2.Payload.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=texteditor__pb2.Username.FromString,
                    response_serializer=texteditor__pb2.Payload.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=texteditor__pb2.Username.FromString,
                    response_serializer=texteditor__pb2.Payload.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.TextEditor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextEditor(object):
    """python -m grpc_tools.protoc --proto_path=./protos --python_out=. --grpc_python_out=. texteditor.proto

    Interface exported by the server.
    """

    @staticmethod
    def SaveToServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.TextEditor/SaveToServer',
            texteditor__pb2.Download.SerializeToString,
            texteditor__pb2.FileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFromServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.TextEditor/DeleteFromServer',
            texteditor__pb2.FileResponse.SerializeToString,
            texteditor__pb2.FileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenNewFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.TextEditor/OpenNewFile',
            texteditor__pb2.Download.SerializeToString,
            texteditor__pb2.FileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenExistingFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chat.TextEditor/OpenExistingFile',
            texteditor__pb2.Download.SerializeToString,
            texteditor__pb2.Data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Listen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chat.TextEditor/Listen',
            texteditor__pb2.Username.SerializeToString,
            texteditor__pb2.Download.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignInExisting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.TextEditor/SignInExisting',
            texteditor__pb2.Username.SerializeToString,
            texteditor__pb2.Unreads.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.TextEditor/AddUser',
            texteditor__pb2.Username.SerializeToString,
            texteditor__pb2.Welcome.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.TextEditor/Send',
            texteditor__pb2.SendRequest.SerializeToString,
            texteditor__pb2.Payload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.TextEditor/List',
            texteditor__pb2.Payload.SerializeToString,
            texteditor__pb2.Payload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.TextEditor/Logout',
            texteditor__pb2.Username.SerializeToString,
            texteditor__pb2.Payload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.TextEditor/Delete',
            texteditor__pb2.Username.SerializeToString,
            texteditor__pb2.Payload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
